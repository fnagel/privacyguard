<?phpclass tx_privacyguard_cleaner extends tx_scheduler_Task {	protected $debugging;	public function execute() {			$this->debugging = FALSE;		// $this->debugging = TRUE;				$flag = FALSE;				$this->cleanValues();				if ( $this->privacyguard_extkey === "sys_log" || t3lib_extMgm::isLoaded( $this->privacyguard_extkey ) ) {			$flag = $this->chooseExtension();		} else {			$this->log( "Extension " . $this->privacyguard_extkey . " is not installed", 3);			}				return $flag;	}		public function chooseExtension() {		$flag = FALSE;				// TODO make this more fancy and extendable (Hooks)				switch ( $this->privacyguard_extkey ) {			case 'comments':				$flag = $this->comments();						break;			case 'formhandler':				$flag = $this->formhandler();						break;			case 'px_phpids':				$flag = $this->px_phpids();						break;			case 'sfpantispam':				$flag = $this->sfantispam();						break;			case 've_guestbook':				$flag = $this->ve_guestbook();						break;			case 'sys_log':				$flag = $this->sys_log();						break;			case 'spamshield':				$flag = $this->spamshield();						break;		}					return $flag;	}		public function getAdditionalInformation() {		$text = '';				$text .= 'EXT:' . $this->privacyguard_extkey;		$text .= ', ' . $GLOBALS['LANG']->sL('LLL:EXT:privacyguard/lang/locallang.xml:addfields_method_' . $this->privacyguard_method );		$text .= ', ' . $this->privacyguard_time;				return $text;	}		public function cleanValues() {		$this->privacyguard_time = 		strip_tags( $this->privacyguard_time );			$this->privacyguard_extkey = 	strip_tags( $this->privacyguard_extkey );		$this->privacyguard_method = 	strip_tags( $this->privacyguard_method );				$this->log( '$this->time: ' . $this->privacyguard_time);		$this->log( '$this->extkey: ' . $this->privacyguard_extkey);		$this->log( '$this->method: ' . $this->privacyguard_method);	}		public function processCleaning( $table, $fields ) {		$flag = FALSE;		if ( strlen( $table ) > 0 ) {			switch ( $this->privacyguard_method ) {				case 'delete_ip':						case 'anonymize_ip':					$where = $this->getWhereClause($table);					if ( $this->debugging ) {							$this->log( 'SQL DEBUG: ' . $GLOBALS['TYPO3_DB']->UPDATEquery( $table, $where, $fields ) );					} else {						$res = $GLOBALS['TYPO3_DB']->exec_UPDATEquery( $table, $where, $fields );						$flag = TRUE;					}				break;				case 'delete_all':						if ( $this->privacyguard_time ) {							$where = $this->getWhereClause($table);							if ( $this->debugging ) {							$this->log( 'SQL DEBUG: ' . $GLOBALS['TYPO3_DB']->DELETEquery( $table , $where ) );						} else {							$res = $GLOBALS['TYPO3_DB']->exec_DELETEquery( $table , $where );							$flag = TRUE;						}					} else {						// use truncate for better performance when all entries should be deleted						if ( $this->debugging ) {							$this->log( 'SQL DEBUG: TRUNCATE TABLE ' . $table . ';' );						} else {							$res = $GLOBALS['TYPO3_DB']->sql_query( 'TRUNCATE TABLE ' . $table . ';' );						}						}										break;							}			if ( !$this->debugging ) {				$error = $GLOBALS['TYPO3_DB']->sql_error();				if ($error) {					throw new Exception( 'tx_privacyguard_cleaner failed for table ' . $table . ' with error: ' . $error, 1308255491 );				}			}		} else {			$this->log( "No TABLE given", 3);				}				return $flag;	}		public function getWhereClause($table) {		$where = '';				if ( $this->privacyguard_time ) {			switch ( $table ) {				case 'tx_pxphpids_log':					$where = 'UNIX_TIMESTAMP(created) < ' . $this->getWhereTimestamp();				break;					case 'sys_log':					$where = 'tstamp < ' . $this->getWhereTimestamp();				break;					default:					$where = 'crdate < ' . $this->getWhereTimestamp();				break;				}		}				return $where;	}		public function getWhereTimestamp(){		$timestamp = '';		// choose correct time		switch ( $this->privacyguard_time ) {			case '24h':				$timestamp = mktime(date("H"), date("i"), date("s"), date("m"), date("d") - 1, date("Y"));			break;							case '48h':				$timestamp = mktime(date("H"), date("i"), date("s"), date("m"), date("d") - 2, date("Y"));			break;								case '72h':				$timestamp = mktime(date("H"), date("i"), date("s"), date("m"), date("d") - 3, date("Y"));			break;								case '7d':				$timestamp = mktime(date("H"), date("i"), date("s"), date("m"), date("d") - 7, date("Y"));			break;								case '14d':				$timestamp = mktime(date("H"), date("i"), date("s"), date("m"), date("d") - 14, date("Y"));			break;								case '1m':				$timestamp = mktime(date("H"), date("i"), date("s"), date("m") - 1, date("d"), date("Y"));			break;									case '3m':				$timestamp = mktime(date("H"), date("i"), date("s"), date("m") - 3, date("d"), date("Y"));			break;										case '6m':				$timestamp = mktime(date("H"), date("i"), date("s"), date("m") - 6, date("d"), date("Y"));			break;										case '12m':				$timestamp = mktime(date("H"), date("i"), date("s"), date("m"), date("d"), date("Y") - 1);			break;						}				return $timestamp;	}		public function sfantispam() {		$fields = array();				$table = 'tx_sfpantispam_log';		$fields['ipaddress'] = '';				return $this->processCleaning($table, $fields);	}		public function formhandler() {		$fields = array();				$table = 'tx_formhandler_log';			$fields['ip'] = '';				return $this->processCleaning($table, $fields);	}			public function px_phpids() {		$fields = array();				$table = 'tx_pxphpids_log';			$fields['ip'] = '';				return $this->processCleaning($table, $fields);	}			public function ve_guestbook() {		$fields = array();				$table = 'tx_veguestbook_entries';			$fields['remote_addr'] = '';				return $this->processCleaning($table, $fields);	}				public function comments() {		$fields = array();				$table = 'tx_comments_comments';					$fields['remote_addr'] = '';				return $this->processCleaning($table, $fields);	}			public function sys_log() {		$fields = array();				$table = 'sys_log';					$fields['IP'] = '';		$fields['log_data'] = '';				return $this->processCleaning($table, $fields);	}		public function spamshield() {		$fields = array();				$table = 'tx_spamshield_log';					$fields['ip'] = '';				return $this->processCleaning($table, $fields);	}			public function log( $msg, $status = 1 ) {		// higher status for debugging		if ( $this->debugging ) {			t3lib_div::devLog($msg, 'privacyguard', 3);		}  		// write dev log if enabled		elseif (TYPO3_DLOG) {			t3lib_div::devLog($msg, 'privacyguard', $status);		}	}}if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/privacyguard/tasks/class.tx_privacyguard_cleaner.php'])	{	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/privacyguard/tasks/class.tx_privacyguard_cleaner.php']);}?>